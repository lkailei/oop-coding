(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{432:function(t,a,s){"use strict";s.r(a);var r=s(31),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"spring-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-data"}},[t._v("#")]),t._v(" Spring Data:")]),t._v(" "),s("h2",{attrs:{id:"springdata简述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#springdata简述"}},[t._v("#")]),t._v(" SpringData简述")]),t._v(" "),s("p",[t._v("Spring 的一个子项目。用于简化数据库访问，支持"),s("strong",[t._v("NoSQL")]),t._v(" 和 "),s("strong",[t._v("关系数据存储")]),t._v("。其主要目标是使数据库的访问变得方便快捷。")]),t._v(" "),s("p",[t._v("SpringData 项目所支持 "),s("strong",[t._v("NoSQL")]),t._v(" "),s("strong",[t._v("存储")]),t._v("：")]),t._v(" "),s("ul",[s("li",[t._v("MongoDB （文档数据库）")]),t._v(" "),s("li",[t._v("Neo4j（图形数据库）")]),t._v(" "),s("li",[t._v("Redis（键/值存储）")]),t._v(" "),s("li",[t._v("Hbase（列族数据库）")])]),t._v(" "),s("p",[t._v("SpringData 项目所支持的"),s("strong",[t._v("关系数据存储技术")]),t._v("：JDBC      JPA")]),t._v(" "),s("h2",{attrs:{id:"jpa-spring-data-概述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jpa-spring-data-概述"}},[t._v("#")]),t._v(" JPA Spring Data 概述")]),t._v(" "),s("p",[t._v("JPA Spring Data : 致力于减少数据访问层 (DAO) 的开发量. 开发者唯一要做的，就只是"),s("strong",[t._v("声明持久层的接口")]),t._v("，其他都交给 Spring Data JPA 来帮你完成！")]),t._v(" "),s("p",[t._v("框架怎么可能代替开发者实现业务逻辑呢？比如：当有一个 UserDao.findUserById()  这样一个方法声明，大致应该能判断出这是根据给定条件的 ID 查询出满足条件的 User  对象。Spring Data JPA 做的便是规范方法的名字，根据符合规范的名字来确定方法需要实现什么样的逻辑。")]),t._v(" "),s("h3",{attrs:{id:"如何使用spring-data-jpa-呢"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#如何使用spring-data-jpa-呢"}},[t._v("#")]),t._v(" 如何使用Spring Data JPA 呢")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("配置")]),t._v(" "),s("strong",[t._v("Spring")]),t._v(" "),s("strong",[t._v("整合")]),t._v(" "),s("strong",[t._v("JPA")])]),t._v(" "),s("li",[t._v("在 "),s("strong",[t._v("Spring")]),t._v(" "),s("strong",[t._v("配置文件中配置")]),t._v(" "),s("strong",[t._v("Spring Data")]),t._v("，让 Spring 为声明的接口创建代理对象。配置了 "),s("a",{attrs:{href:"jpa:repositories"}},[t._v("jpa:repositories")]),t._v(" 后，Spring 初始化容器时将会扫描 base-package  指定的包目录及其子目录，为继承 Repository 或其子接口的接口创建代理对象，并将代理对象注册为 Spring Bean，业务层便可以通过 Spring 自动封装的特性来直接使用该对象。")]),t._v(" "),s("li",[s("strong",[t._v("声明持久层的接口，该接口继承")]),t._v(" "),s("strong",[t._v("Repository")]),t._v("，Repository 是一个标记型接口，它不包含任何方法，如必要，Spring Data 可实现 Repository 其他子接口，其中定义了一些常用的增删改查，以及分页相关的方法。")]),t._v(" "),s("li",[s("strong",[t._v("在接口中声明需要的方法")]),t._v("。Spring Data 将根据给定的策略（具体策略稍后讲解）来为其生成实现代码。")])]),t._v(" "),s("h3",{attrs:{id:"repository接口简介"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#repository接口简介"}},[t._v("#")]),t._v(" Repository接口简介：")]),t._v(" "),s("p",[t._v("Repository 接口是 Spring Data 的一个核心接口，它不提供任何方法，开发者需要在自己定义的接口中声明需要的方法")]),t._v(" "),s("p",[t._v("​    "),s("code",[t._v("public interface Repository<T, ID extends Serializable> { }")])]),t._v(" "),s("p",[t._v("Spring Data可以让我们只定义接口，只要遵循 "),s("strong",[t._v("Spring Data")]),t._v("的规范，就无需写实现类。")]),t._v(" "),s("p",[s("strong",[t._v("与继承 Repository")]),t._v(" "),s("strong",[t._v("等价的一种方式，就是在持久层接口上使用")]),t._v(" "),s("strong",[t._v("@RepositoryDefinition")]),t._v(" "),s("strong",[t._v("注解")]),t._v("，并为其指定 domainClass 和 idClass 属性。如下两种方式是完全等价的")]),t._v(" "),s("p",[t._v("基础的 Repository 提供了最基本的数据访问功能，其几个子接口则扩展了一些功能。它们的继承关系如下：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("Repository")]),t._v("： 仅仅是一个标识，表明任何继承它的均为仓库接口类")]),t._v(" "),s("li",[s("strong",[t._v("CrudRepository")]),t._v("： 继承 Repository，实现了一组 CRUD 相关的方法")]),t._v(" "),s("li",[s("strong",[t._v("PagingAndSortingRepository")]),t._v("： 继承 CrudRepository，实现了一组分页排序相关的方法")]),t._v(" "),s("li",[s("strong",[t._v("JpaRepository")]),t._v("： 继承 PagingAndSortingRepository，实现一组 JPA 规范相关的方法")]),t._v(" "),s("li",[s("strong",[t._v("自定义的")]),t._v(" "),s("strong",[t._v("XxxxRepository")]),t._v(" 需要继承 JpaRepository，这样的 XxxxRepository 接口就具备了通用的数据访问控制层的能力。")]),t._v(" "),s("li",[s("strong",[t._v("JpaSpecificationExecutor")]),t._v("： 不属于Repository体系，实现一组 JPA "),s("strong",[t._v("Criteria")]),t._v(" 查询相关的方法")])]),t._v(" "),s("h2",{attrs:{id:"spring-data方法定义规范"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spring-data方法定义规范"}},[t._v("#")]),t._v(" Spring Data方法定义规范：")]),t._v(" "),s("h3",{attrs:{id:"简单条件查询"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#简单条件查询"}},[t._v("#")]),t._v(" 简单条件查询")]),t._v(" "),s("p",[t._v("简单条件查询: 查询某一个实体类或者集合")]),t._v(" "),s("p",[s("strong",[t._v("按照")]),t._v(" "),s("strong",[t._v("Spring")]),t._v(" "),s("strong",[t._v("Data")]),t._v(" "),s("strong",[t._v("的规范")]),t._v("，查询方法以 "),s("strong",[t._v("find | read | get")]),t._v(" 开头， 涉及条件查询时，条件的属性用条件关键字连接，要注意的是：条件属性以首字母大写。")]),t._v(" "),s("p",[t._v("例如：定义一个 Entity 实体类")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v("｛ \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" firstName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lastName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n ｝ \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 使用And条件连接时，应这样写： ")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findByLastNameAndFirstName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lastName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" firstName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 条件的属性名称与个数要与参数的位置与个数一一对应 ")]),t._v("\n")])])]),s("h4",{attrs:{id:"支持的关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#支持的关键字"}},[t._v("#")]),t._v(" 支持的关键字")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/0w6VoQ",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"0w6VoQ.png","data-src":"https://s1.ax1x.com/2020/10/08/0w6VoQ.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/0w6Edg",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"0w6Edg.png","data-src":"https://s1.ax1x.com/2020/10/08/0w6Edg.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("h4",{attrs:{id:"查询方法解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询方法解析"}},[t._v("#")]),t._v(" 查询方法解析")]),t._v(" "),s("p",[t._v("findBy"),s("strong",[t._v("UserDepUuid")]),t._v("()，框架在解析该方法时，首先剔除 findBy，然后对剩下的属性进行解析，假设查询实体为Doc")]),t._v(" "),s("ul",[s("li",[t._v("先判断 "),s("strong",[t._v("userDepUuid")]),t._v(" （根据 POJO 规范，首字母变为小写）是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，继续第二步；")]),t._v(" "),s("li",[t._v("从右往左截取第一个大写字母开头的字符串(此处为"),s("strong",[t._v("Uuid")]),t._v(")，然后检查剩下的字符串是否为查询实体的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，则重复第二步，继续从右往左截取；最后假设 user 为查询实体的一个属性；")]),t._v(" "),s("li",[t._v("接着处理剩下部分（DepUuid），先判断 user 所对应的类型是否有depUuid属性，如果有，则表示该方法最终是根据 “ Doc.user.depUuid” 的取值进行查询；否则继续按照步骤 2 的规则从右往左截取，最终表示根据 “"),s("strong",[t._v("Doc.user.dep.uuid")]),t._v("” 的值进行查询。")]),t._v(" "),s("li",[t._v("可能会存在一种特殊情况，比如 Doc包含一个 user 的属性，也有一个 userDep 属性，此时会存在混淆。"),s("strong",[t._v("可以明确在属性之间加上")]),t._v(" "),s("strong",[t._v('"_"')]),t._v(" "),s("strong",[t._v("以显式表达意图")]),t._v('，比如 "findByUser_DepUuid()" 或者 "findByUserDep_uuid()"')])]),t._v(" "),s("p",[t._v("特殊的参数： 还可以直接在方法的参数上加入分页或排序的参数，比如：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("–"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Page")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserModel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findByName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pageable")]),t._v(" pageable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n–"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UserModel")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("findByName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Sort")]),t._v(" sort"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Query")]),t._v("\n与\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Modifying")]),t._v("\n执行更新操作\n")])])]),s("h3",{attrs:{id:"crudrepository接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#crudrepository接口"}},[t._v("#")]),t._v(" CrudRepository接口")]),t._v(" "),s("p",[t._v("CrudRepository 接口提供了最基本的对实体类的添删改查操作")]),t._v(" "),s("p",[s("code",[t._v("T save(T entity);//保存单个实体")])]),t._v(" "),s("p",[s("code",[t._v("Iterable<T> save(Iterable<? extends T> entities);//保存集合")])]),t._v(" "),s("p",[s("code",[t._v("T findOne(ID id);//根据id查找实体")])]),t._v(" "),s("p",[s("code",[t._v("boolean exists(ID id);//根据id判断实体是否存在")])]),t._v(" "),s("p",[s("code",[t._v("Iterable<T> findAll();//查询所有实体,不用或慎用!")])]),t._v(" "),s("p",[s("code",[t._v("long count();//查询实体数量")])]),t._v(" "),s("p",[s("code",[t._v("void delete(ID id);//根据Id删除实体")])]),t._v(" "),s("p",[s("code",[t._v("void delete(T entity);//删除一个实体")])]),t._v(" "),s("p",[s("code",[t._v("void delete(Iterable<? extends T> entities);//删除一个实体的集合")])]),t._v(" "),s("p",[s("code",[t._v("void deleteAll();//删除所有实体,不用或慎用!")])]),t._v(" "),s("h3",{attrs:{id:"pagingandsortingrepository接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pagingandsortingrepository接口"}},[t._v("#")]),t._v(" PagingAndSortingRepository接口")]),t._v(" "),s("p",[t._v("该接口提供了分页与排序功能")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("Iterable<T> findAll(Sort sort);")]),t._v(" //排序")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Page<T> findAll(Pageable pageable);")]),t._v(" //分页查询（含排序功能）")])])]),t._v(" "),s("h3",{attrs:{id:"jparepository接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jparepository接口"}},[t._v("#")]),t._v(" JpaRepository接口")]),t._v(" "),s("p",[t._v("该接口提供了JPA的相关功能")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v("List<T> findAll();")]),t._v(" //查找所有实体")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("List<T> findAll(Sort sort);")]),t._v(" //排序、查找所有实体")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("List<T> save(Iterable<? extends T> entities);")]),t._v("//保存集合")])]),t._v(" "),s("li",[s("p",[t._v("void flush();//执行缓存与数据库同步")])]),t._v(" "),s("li",[s("p",[t._v("T saveAndFlush(T entity);//强制执行持久化")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("void deleteInBatch(Iterable<T> entities);")]),t._v("//删除一个实体集合")])])]),t._v(" "),s("h3",{attrs:{id:"jpaspecificationexecutor接口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#jpaspecificationexecutor接口"}},[t._v("#")]),t._v(" JpaSpecificationExecutor接口")]),t._v(" "),s("p",[t._v("不属于Repository体系，实现一组 JPA "),s("strong",[t._v("Criteria")]),t._v(" 查询相关的方法")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/0w6AeS",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"0w6AeS.png","data-src":"https://s1.ax1x.com/2020/10/08/0w6AeS.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("Specification：封装  JPA Criteria 查询条件。通常使用匿名内部类的方式来创建该接口的对象")])])}),[],!1,null,null,null);a.default=e.exports}}]);