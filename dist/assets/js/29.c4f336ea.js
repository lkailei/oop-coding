(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{423:function(t,n,s){"use strict";s.r(n);var a=s(31),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),s("h3",{attrs:{id:"代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#代理"}},[t._v("#")]),t._v(" 代理：")]),t._v(" "),s("p",[t._v("代理服务器，客户机在发送请求时，不会直接发送给目的主机，而是先发送给代理服务器，代理服务接受客户机请求之后，再向主机发出，并接收目的主机返回的数据，存放在代理服务器的硬盘中，再发送给客户机。")]),t._v(" "),s("h4",{attrs:{id:"正向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正向代理"}},[t._v("#")]),t._v(" 正向代理：")]),t._v(" "),s("p",[t._v("正向代理，架设在客户机与目标主机之间，只用于代理内部网络对 Internet 的连接请求，客户机必须指定代理服务器,并将本来要直接发送到 Web 服务器上的 Http 请求发送到代理服务器中。")]),t._v(" "),s("h4",{attrs:{id:"反向代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反向代理"}},[t._v("#")]),t._v(" 反向代理：")]),t._v(" "),s("p",[t._v("反向代理服务器架设在服务器端，通过缓冲经常被请求的页面来缓解服务器的工作量，将客户机请求转发给内部网络上的目标服务器；并将从服务器上得到的结果返回给 Internet 上请求连接的客户端，此时代理服务器与目标主机一起对外表现为一个服务器。")]),t._v(" "),s("h3",{attrs:{id:"虚拟主机"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#虚拟主机"}},[t._v("#")]),t._v(" 虚拟主机：")]),t._v(" "),s("p",[t._v("​        虚拟主机是一种特殊的软硬件技术，它可以将网络上的每一台计算机分成多个虚拟主机，每个虚拟主机可以独立对外提供 www 服务，这样就可以实现一台主机对外提供多个 web 服务，每个虚拟主机之间是独立的，互不影响的。")]),t._v(" "),s("p",[t._v("通过 Nginx 可以实现虚拟主机的配置，Nginx 支持三种类型的虚拟主机配置")]),t._v(" "),s("ul",[s("li",[t._v("基于 IP 的虚拟主机")]),t._v(" "),s("li",[t._v("基于域名的虚拟主机")]),t._v(" "),s("li",[t._v("基于端口的虚拟主机")])]),t._v(" "),s("h3",{attrs:{id:"nginx的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx的使用"}},[t._v("#")]),t._v(" nginx的使用：")]),t._v(" "),s("p",[t._v("​\tNginx 是一款高性能的 HTTP 服务器/反向代理服务器及电子邮件（IMAP/POP3）代理服务器。由俄罗斯的程序设计师 Igor Sysoev 所开发，官方测试 Nginx 能够支支撑 5 万并发链接，并且 CPU、内存等资源消耗却非常低，运行非常稳定。")]),t._v(" "),s("p",[t._v("​\tNginx既可以在内部的直接支持Rails和PHP程序对外进行服务,也可以支持HTTP代理服务对外进行服务，采用C语言编写,处理静态文件，索引文件以及自动索引;打开文件描述符缓冲。无缓存的反向代理加速，简单的负载均衡和容错。FastCGI，简单的负载均衡和容错。模块化的结构。包括 gzipping, byte ranges, chunked responses,以及 SSI-filter 等 filter。如果由 FastCG或其它代理服务器处理单页中存在的多个 SSI，则这项处理可以并行运行，而不需要相互等待。支持 SSL 和 TLSSNI。")]),t._v(" "),s("h4",{attrs:{id:"nginx-的应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx-的应用场景"}},[t._v("#")]),t._v(" Nginx 的应用场景")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("HTTP 服务器：Nginx 是一个 HTTP 服务可以独立提供 HTTP 服务。可以做网页静态服务器。")])]),t._v(" "),s("li",[s("p",[t._v("虚拟主机：可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。")])]),t._v(" "),s("li",[s("p",[t._v("反向代理，负载均衡：当网站的访问量达到一定程度后，单台服务器不能满足用户的请求时，需要用多台服务器集群可以使用 Nginx 做反向代理。并且多台服务器可以平均分担负载，不会因为某台服务器负载高宕机而某台服务器闲置的情况 .")]),t._v(" "),s("p",[t._v("负载均衡，英文名称为 Load Balance，其意思就是分摊到多个操作单元上进行执行，例如 Web 服务器、FTP 服务器、企业关键应用服务器和其它关键任务服务器等，从而共同完成工作任务")])])]),t._v(" "),s("h5",{attrs:{id:"_1-docker-compose-yml来使用nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-docker-compose-yml来使用nginx"}},[t._v("#")]),t._v(" 1.docker-compose.yml来使用nginx:")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.1'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("81:80")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./conf/nginx.conf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/etc/nginx/nginx.conf\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./wwwroot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/usr/share/nginx/wwwroot\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置nginx的数据卷：")]),t._v("\n  在dokcer文件下创建：nginx的目录下创建：nginx.conf文件：\n  在当前目录创建wwwroot目录\n  这里直接书写为\n  /usr/local/dokcer/nginx/conf/nginx.conf\n  /usr/local/dokcer/nginx/wwwroot\n  在nginx.conf目录配置nginx的虚拟主机：\n")])])]),s("h5",{attrs:{id:"_2-nginx中使用虚拟主机配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-nginx中使用虚拟主机配置"}},[t._v("#")]),t._v(" 2.nginx中使用虚拟主机配置：")]),t._v(" "),s("p",[t._v("​       需求")]),t._v(" "),s("p",[t._v("​            Nginx 对外提供 80 和 8080 两个端口监听服务")]),t._v(" "),s("p",[t._v("​            请求 80 端口则请求 html80 目录下的 html")]),t._v(" "),s("p",[t._v("​            请求 8080 端口则请求 html8080 目录下的 html")]),t._v(" "),s("h6",{attrs:{id:"创建目录及文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#创建目录及文件"}},[t._v("#")]),t._v(" "),s("strong",[t._v("创建目录及文件")])]),t._v(" "),s("p",[t._v("​            在 /usr/local/docker/nginx/wwwroot 目录下创建 html80 和 html8080 两个目录，并分辨创建两个 index.html 文件")]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置虚拟主机")]),t._v("\n修改 /usr/local/docker/nginx/conf 目录下的 nginx.conf 配置文件：\nworker_processes  1;\n\nevents "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tworker_connections  1024;\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nhttp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tinclude       mime.types;\n\tdefault_type  application/octet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("stream;\n\n\tsendfile        on;\n\n\t\tkeepalive_timeout  65;\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置虚拟主机 192.168.75.145")]),t._v("\n    server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 监听的ip和端口，配置 192.168.75.145:80")]),t._v("\n\t\tlisten       80;\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 虚拟主机名称这里配置ip地址")]),t._v("\n\t\tserver_name  192.168.75.145;\n\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 所有的请求都以 / 开始，所有的请求都可以匹配此 location")]),t._v("\n\t\tlocation / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 使用 root 指令指定虚拟主机目录即网页存放目录")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如访问 http://ip/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/index.html")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html")]),t._v("\n\n\t\t\troot   /usr/share/nginx/wwwroot/html80;\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 指定欢迎页面，按从左到右顺序查找")]),t._v("\n\t\t\tindex  index.html index.htm;\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置虚拟主机 192.168.75.245")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tlisten       8080;\n\t\tserver_name  192.168.75.145;\n\n\t\t  location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\troot   /usr/share/nginx/wwwroot/html8080;\n\t\t\tindex  index.html index.htm;\n\t\t  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    说明：这里的启动的端口必须和dockercompose中的nginx的启动端口一一对应：\n    例如：这里有两个分别为8080和80那么port应这样写\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("80:80")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 8080： 8080\n    同时这里的location不能改变，改变的话也是改变对应的数据卷，其实就是这个文件映射到数据卷位置\n    这里不需要改变只需改变html8000这个就可以：\n    location / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      root   /usr/share/nginx/wwwroot/html8080;\n      index  index.html index.htm;\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h6",{attrs:{id:"基于域名的虚拟主机配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基于域名的虚拟主机配置"}},[t._v("#")]),t._v(" 基于域名的虚拟主机配置")]),t._v(" "),s("p",[t._v("​\t需求:两个域名指向同一台 Nginx 服务器，用户访问不同的域名显示不同的网页内容 两个域名是 admin.service.itoken.funtl.com 和 admin.web.itoken.funtl.comNginx 服务器使用虚拟机 192.168.75.145")]),t._v(" "),s("p",[s("strong",[t._v("配置 Windows Hosts 文件")])]),t._v(" "),s("p",[t._v("通过 host 文件指定 admin.service.itoken.funtl.com 和 admin.web.itoken.funtl.com 对应 192.168.75.145 虚拟机：\n修改 window 的 hosts 文件：（C:\\Windows\\System32\\drivers\\etc）")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("worker_processes  1;\nevents {\n\tworker_connections  1024;\n}\n\nhttp {\n\tinclude       mime.types;\n\tdefault_type  application/octet-stream;\n\tsendfile        on;\n\tkeepalive_timeout  65;\n\t# 配置虚拟主机 192.168.75.145\n​    server {\n\t\t# 监听的ip和端口，配置 192.168.75.145:80\n\t\tlisten       80;\n\t\t# 虚拟主机名称这里配置ip地址\n\t\tserver_name  www.kay.com;\n\t\t# 所有的请求都以 / 开始，所有的请求都可以匹配此 location\n\t\tlocation / {\n\t\t\t# 使用 root 指令指定虚拟主机目录即网页存放目录\n\t\t\t# 比如访问 http://ip/index.html 将找到 \t\t\t\t\t /usr/local/docker/nginx/wwwroot/html80/index.html\n\t\t\t# 比如访问 http://ip/item/index.html 将找到 /usr/local/docker/nginx/wwwroot/html80/item/index.html\n\t\t\troot   /usr/share/nginx/wwwroot/html80;\n\t\t\t# 指定欢迎页面，按从左到右顺序查找\n​            index  index.html index.htm;\n​        }\n​    }\n\t# 配置虚拟主机 192.168.75.245\n\tserver {\n\t   listen       8080;\n\t   server_name  192.168.75.145;\n\t\tlocation / {\n\t\t\troot   /usr/share/nginx/wwwroot/html8080;\n\t\t\tindex  index.html index.htm;\n\t\t}\n\t}\n}\n通过 host 文件指定 admin.service.itoken.funtl.com 和 admin.web.itoken.funtl.com 对应 192.168.75.145 虚拟机：\n这样通过域名即可访问：\n# 创建目录及文件\n在 /usr/local/docker/nginx/wwwroot 目录下创建 htmlservice 和 htmlweb 两个目录，并分辨创建两个 index.html 文件\n# 配置虚拟主机\n\nuser  nginx;\nworker_processes  1;\n\nevents {\n\tworker_connections  1024;\n}\n\nhttp {\n\tinclude   mime.types;\n    default_type  application/octet-stream;\n    sendfile        on;\n    keepalive_timeout  65;\n    server {\n    \tlisten       80;\n      \tserver_name  admin.service.itoken.funtl.com;\n      \tlocation / {\n          \troot   /usr/share/nginx/wwwroot/htmlservice;\n          \tindex  index.html index.htm;\n      \t}\n\t}\n\n    server {\n\t\tlisten       80;\n        server_name  admin.web.itoken.funtl.com;\n\n       location / {\n             root   /usr/share/nginx/wwwroot/htmlweb;\n             index  index.html index.htm;\n         }\n    }                      \n}\n")])])]),s("h5",{attrs:{id:"_3-使用nginx反向代理tomcat"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-使用nginx反向代理tomcat"}},[t._v("#")]),t._v(" 3.使用nginx反向代理tomcat:")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/Dk7kWj",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"Dk7kWj.jpg","data-src":"https://s3.ax1x.com/2020/11/16/Dk7kWj.jpg",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("div",{staticClass:"language-yml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yml"}},[s("code",[t._v("（1） 启动两个tomcat：在dokcer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("compose.yml 编辑：\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tomcat1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tomcat\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tomcat1\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 9090"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("tomcat2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tomcat\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tomcat2\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" 9091"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),t._v("\n\n(2) local/docker/nginx/conf 目录下的 nginx.conf 配置文件：\nuser  nginx;\nworker_processes  1;\n\nevents "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tworker_connections  1024;\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nhttp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tinclude       mime.types;\n\tdefault_type  application/octet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("stream;\n\n\tsendfile        on;\n\n\tkeepalive_timeout  65;\n\t\n\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置一个代理即 tomcat1 服务器")]),t._v("\n\n\tupstream tomcatServer1 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tserver 192.168.75.145"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("9090;\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#配置一个代理即 tomcat2 服务器")]),t._v("\n\n\tupstream tomcatServer2 "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tserver 192.168.75.145"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("9091;\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置一个虚拟主机")]),t._v("\n\tserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tlisten 80;\n\t\tserver_name admin.service.itoken.funtl.com;\n\t\tlocation / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#域名 admin.service.itoken.funtl.com 的请求全部转发到 tomcat_server1 即 tomcat1 服务上")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#可以直接书写tomcat的路径即可")]),t._v("\n\t\t\tproxy_pass http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//tomcatServer1;\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#欢迎页面，按照从左到右的顺序查找页面")]),t._v("\n\t\t\tindex index.jsp index.html index.htm;\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\tserver "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tlisten 80;\n\t\tserver_name admin.web.itoken.funtl.com;\n\t\tlocation / "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#域名 admin.web.itoken.funtl.com 的请求全部转发到 tomcat_server2 即 tomcat2 服务上")]),t._v("\n\t\t\tproxy_pass http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//tomcatServer2;\n\t\t\tindex index.jsp index.html index.htm;\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n \n（3）启动nginx在docker"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("compose.yml中配置：\n"),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nexus")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sonatype/nexus3'")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nexus\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'8081:8081'")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/usr/local/docker/nexus/data:/nexus-data'")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nignx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n      "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'8088:8088'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'9000:9000'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'80:80'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/usr/local/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf'")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/usr/local/docker/nginx/wwwroot:/usr/share/nginx/wwwroot'")]),t._v("         \n")])])]),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n# 定义负载均衡设备的 Ip及设备状态 \nupstream myServer {\n    server 127.0.0.1:9090 down;\n    server 127.0.0.1:8080 weight=2;\n    server 127.0.0.1:6060;\n    server 127.0.0.1:7070 backup;\n}\n")])])]),s("ul",[s("li",[s("p",[s("code",[t._v("upstream")]),t._v("：每个设备的状态:")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("down")]),t._v("：表示当前的 "),s("code",[t._v("server")]),t._v(" 暂时不参与负载")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("weight")]),t._v("：默认为 1 "),s("code",[t._v("weight")]),t._v(" 越大，负载的权重就越大。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("max_fails")]),t._v("：允许请求失败的次数默认为 1 当超过最大次数时，返回 "),s("code",[t._v("proxy_next_upstream")]),t._v(" 模块定义的错误")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("fail_timeout")]),t._v(":"),s("code",[t._v("max_fails")]),t._v(" 次失败后，暂停的时间。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("backup")]),t._v("：其它所有的非 "),s("code",[t._v("backup")]),t._v(" 机器 "),s("code",[t._v("down")]),t._v(" 或者忙的时候，请求 "),s("code",[t._v("backup")]),t._v(" 机器。所以这台机器压力会最轻")]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://img-blog.csdnimg.cn/20190624193234777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MjU2ODk2,size_16,color_FFFFFF,t_70",loading:"lazy"}})])])]),t._v(" "),s("p",[s("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://img-blog.csdnimg.cn/2019062419304284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM3MjU2ODk2,size_16,color_FFFFFF,t_70",loading:"lazy"}})]),t._v(" "),s("h5",{attrs:{id:"_4-实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-实战"}},[t._v("#")]),t._v(" 4.实战：")]),t._v(" "),s("div",{staticClass:"language-xml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-xml"}},[s("code",[t._v(' 在一个虚拟主机配置两个tomcat:\n1.vim /etc/profile\n    export CATALINA1_BASE="tomcat路径"\n    export CATALINA1_HOME="tomcat路径"\n    export Tomcat1Home=CATALINA1_BASE\n    export CATALINA2_BASE="tomcat2路径"\n    export CATALINA2_HOME="tomcat2路径"\n    export Tomcat2Home=CATALINA2_BASE\n2.在bin文件中修改 catalina.sh\n在首行加入：\n    export CATALINA1_BASE=CATALINA1_BASE\n    export CATALINA1_HOME=CATALINA1_HOME\n3.修改host：\n    8005→9005\n    8009→9009\n    8080→9080\n    8443→9443\n4. ./startup.sh启动即可\n')])])]),s("h4",{attrs:{id:"nginx安装"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx安装"}},[t._v("#")]),t._v(" Nginx安装")]),t._v(" "),s("h5",{attrs:{id:"常规安装-centos下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常规安装-centos下"}},[t._v("#")]),t._v(" 常规安装( centos下）：")]),t._v(" "),s("p",[t._v("1.先安装gcc升级: "),s("code",[t._v("yum -y install make zlib zlib-devel gcc-c++ libtool openssl openssl-devel")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/DkLrUf",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"DkLrUf.md.png","data-src":"https://s3.ax1x.com/2020/11/16/DkLrUf.md.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("2.下载PCRE安装包： "),s("code",[t._v("wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz")]),t._v("。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/DkL0bt",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"DkL0bt.md.png","data-src":"https://s3.ax1x.com/2020/11/16/DkL0bt.md.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("3.解压安装包：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost src]# tar zxvf pcre-8.35.tar.gz \n")])])]),s("p",[t._v("4.编译安装：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost pcre-8.35]# ./configure\n[root@bogon pcre-8.35]# make && make install\n")])])]),s("p",[t._v("5.查看pcre版本")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@bogon pcre-8.35]# pcre-config --version\n")])])]),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/DkLDVP",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"DkLDVP.png","data-src":"https://s3.ax1x.com/2020/11/16/DkLDVP.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("6.下载安装nginx")]),t._v(" "),s("p",[s("code",[t._v("wget http://nginx.org/download/nginx-1.10.2.tar.gz")])]),t._v(" "),s("p",[t._v("7.进入nginx目录编译安装")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost nginx-1.10.2]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35\n[root@localhost nginx-1.10.2]# make\n[root@localhost nginx-1.10.2]# make install\n")])])]),s("p",[t._v("8.查看版本：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost nginx-1.10.2]# /usr/local/webserver/nginx/sbin/nginx -v\n")])])]),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/DkOkMd",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"DkOkMd.png","data-src":"https://s3.ax1x.com/2020/11/16/DkOkMd.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("这里的配置使用的是webserver就是存放的文件的路径")])]),t._v(" "),s("p",[s("strong",[t._v("关闭防火墙强：使其80端口开放：systemctl stop firewalld")])]),t._v(" "),s("p",[s("strong",[t._v("访问：")])]),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/DkjV4f",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"DkjV4f.png","data-src":"https://s3.ax1x.com/2020/11/16/DkjV4f.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("h5",{attrs:{id:"常规安装ubuntu下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常规安装ubuntu下"}},[t._v("#")]),t._v(" 常规安装Ubuntu下：")]),t._v(" "),s("p",[t._v("1.先安装gcc : "),s("code",[t._v("sudo apt-get update")])]),t._v(" "),s("p",[t._v("2.安装 依赖库：")]),t._v(" "),s("p",[s("code",[t._v("apt-get install zlib1g-dev")])]),t._v(" "),s("p",[s("code",[t._v("apt-get install openssl")])]),t._v(" "),s("p",[t._v("3.下载PCRE安装包： "),s("code",[t._v("wget http://downloads.sourceforge.net/project/pcre/pcre/8.35/pcre-8.35.tar.gz")]),t._v("。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/DkL0bt",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"DkL0bt.md.png","data-src":"https://s3.ax1x.com/2020/11/16/DkL0bt.md.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("4.解压安装包：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost src]# tar zxvf pcre-8.35.tar.gz \n")])])]),s("p",[t._v("5.编译安装：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost pcre-8.35]# ./configure\n[root@bogon pcre-8.35]# make && make install\n")])])]),s("p",[t._v("6.查看pcre版本")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@bogon pcre-8.35]# pcre-config --version\n")])])]),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/DkLDVP",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"DkLDVP.png","data-src":"https://s3.ax1x.com/2020/11/16/DkLDVP.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[t._v("7.下载安装nginx")]),t._v(" "),s("p",[s("code",[t._v("wget http://nginx.org/download/nginx-1.10.2.tar.gz")])]),t._v(" "),s("p",[t._v("8.进入nginx目录编译安装")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost nginx-1.10.2]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/local/src/pcre-8.35\n[root@localhost nginx-1.10.2]# make\n[root@localhost nginx-1.10.2]# make install\n")])])]),s("p",[t._v("9.查看版本：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[root@localhost nginx-1.10.2]# /usr/local/webserver/nginx/sbin/nginx -v\n")])])]),s("p",[s("a",{attrs:{href:"https://imgchr.com/i/DkOkMd",target:"_blank",rel:"noopener noreferrer"}},[s("img",{staticClass:"lazy",attrs:{alt:"DkOkMd.png","data-src":"https://s3.ax1x.com/2020/11/16/DkOkMd.png",loading:"lazy"}}),s("OutboundLink")],1)]),t._v(" "),s("p",[s("strong",[t._v("这里的配置使用的是webserver就是存放的文件的路径")])]),t._v(" "),s("p",[s("strong",[t._v("关闭防火墙强：使其80端口开放：systemctl stop firewalld")])]),t._v(" "),s("h5",{attrs:{id:"docker安装nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#docker安装nginx"}},[t._v("#")]),t._v(" Docker安装Nginx")]),t._v(" "),s("p",[s("code",[t._v("docker pull nginx:latest")])]),t._v(" "),s("p",[t._v("运行容器")]),t._v(" "),s("p",[s("code",[t._v("docker run --name nginx-test -p 8080:80 -d nginx")])]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("--name nginx-test")]),t._v("：容器名称。")]),t._v(" "),s("li",[s("strong",[t._v("-p 8080:80")]),t._v("： 端口进行映射，将本地 8080 端口映射到容器内部的 80 端口。")]),t._v(" "),s("li",[s("strong",[t._v("-d nginx")]),t._v("： 设置容器在在后台一直运行。")])]),t._v(" "),s("h5",{attrs:{id:"dockercompose安装nginx"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dockercompose安装nginx"}},[t._v("#")]),t._v(" DockerCompose安装Nginx")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.1'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("nginx")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" nginx\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token datetime number"}},[t._v("81:80")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("volumes")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./conf/nginx.conf"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/etc/nginx/nginx.conf\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" ./wwwroot"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("/usr/share/nginx/wwwroot\n "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 配置nginx的数据卷：")]),t._v("\n  在dokcer文件下创建：nginx的目录下创建：nginx.conf文件：\n  在当前目录创建wwwroot目录\n  这里直接书写为\n  /usr/local/dokcer/nginx/conf/nginx.conf\n  /usr/local/dokcer/nginx/wwwroot\n  在nginx.conf目录配置nginx的虚拟主机：\n")])])]),s("p",[s("strong",[t._v("运行")]),t._v("："),s("code",[t._v("docker-compose up")])]),t._v(" "),s("h4",{attrs:{id:"nginx命令"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx命令"}},[t._v("#")]),t._v(" Nginx命令：")]),t._v(" "),s("h5",{attrs:{id:"windows下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#windows下"}},[t._v("#")]),t._v(" windows下：")]),t._v(" "),s("p",[t._v("cmd 进入Nginx解压目录 执行以下命令")]),t._v(" "),s("p",[s("code",[t._v("start nginx")]),t._v(" : 启动nginx服务")]),t._v(" "),s("p",[s("code",[t._v("nginx -s reload")]),t._v(" ：修改配置后重新加载生效")]),t._v(" "),s("p",[s("code",[t._v("nginx -s reopen")]),t._v(" ：重新打开日志文件 "),s("code",[t._v("nginx -t -c /path/to/nginx.conf")]),t._v(" 测试nginx配置文件是否正确")]),t._v(" "),s("p",[s("code",[t._v("nginx -t")]),t._v("：验证配置是否正确")]),t._v(" "),s("p",[s("code",[t._v("nginx -V")]),t._v("：查看Nginx的版本号")]),t._v(" "),s("p",[s("code",[t._v("nginx -s stop")]),t._v("：快速停止或关闭Nginx")]),t._v(" "),s("p",[s("code",[t._v("nginx -s quit")]),t._v("：正常停止或关闭Nginx")]),t._v(" "),s("h5",{attrs:{id:"linux下"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linux下"}},[t._v("#")]),t._v(" linux下：")]),t._v(" "),s("p",[s("strong",[t._v("启动")])]),t._v(" "),s("p",[s("code",[t._v("./nginx")]),t._v(" 可跟后面的以下参数")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("\n-c </path/to/config> 为 Nginx 指定一个配置文件，来代替缺省的。路径应为绝对路径\n\n-t 不运行，而仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。\n\n-v 显示 nginx 的版本。\n\n-V 显示 nginx 的版本，编译器版本和配置参数。\n")])])]),s("p",[t._v("直接使用./nginx 进行启动。")]),t._v(" "),s("p",[t._v("​    "),s("strong",[t._v("关闭：")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("ps -aux|grep nginx\nkill -9 nginx主进程号\n")])])]),s("p",[s("strong",[t._v("设置开机自启")])]),t._v(" "),s("p",[t._v("1.进入"),s("code",[t._v("/lib/systemd/system")])]),t._v(" "),s("p",[t._v("2.编辑nginx.service 文件 "),s("code",[t._v("vim nginx .service")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("[Unit]\nDescription=nginx service\nAfter=network.target \n   \n[Service] \nType=forking \nExecStart=/usr/local/nginx/sbin/nginx\nExecReload=/usr/local/nginx/sbin/nginx -s reload\nExecStop=/usr/local/nginx/sbin/nginx -s quit\nPrivateTmp=true \n   \n[Install] \nWantedBy=multi-user.target\n")])])]),s("p",[t._v("3.加入开机自启")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("systemctl enable nginx\n")])])]),s("p",[t._v("4.服务状态：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("# systemctl start nginx.service　         启动nginx服务\n\n# systemctl stop nginx.service　          停止服务\n\n# systemctl restart nginx.service　       重新启动服务\n\n# systemctl list-units --type=service     查看所有已启动的服务\n\n# systemctl status nginx.service          查看服务当前状态\n\n# systemctl enable nginx.service          设置开机自启动\n\n# systemctl disable nginx.service         停止开机自启动\n")])])]),s("h4",{attrs:{id:"nginx配置"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx配置"}},[t._v("#")]),t._v(" Nginx配置：")]),t._v(" "),s("div",{staticClass:"language-yaml extra-class"},[s("pre",{pre:!0,attrs:{class:"language-yaml"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("########### 每个指令必须有分号结束。#################")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#user administrator administrators;  #配置用户或者组，默认为nobody nobody。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#worker_processes 2;  #允许生成的进程数，默认为1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址")]),t._v("\nerror_log log/error.log debug;  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg")]),t._v("\nevents "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    accept_mutex on;   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置网路连接序列化，防止惊群现象发生，默认为on")]),t._v("\n    multi_accept on;  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#设置一个进程是否同时接受多个网络连接，默认为off")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport")]),t._v("\n    worker_connections  1024;    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#最大连接数，默认为512")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nhttp "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    include       mime.types;   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#文件扩展名与文件类型映射表")]),t._v("\n    default_type  application/octet"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("stream; "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#默认文件类型，默认为text/plain")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#access_log off; #取消服务日志    ")]),t._v("\n    log_format myFormat '$remote_addr–$remote_user "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("$time_local"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for'; "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#自定义格式")]),t._v("\n    access_log log/access.log myFormat;  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#combined为日志格式的默认值")]),t._v("\n    sendfile on;   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。")]),t._v("\n    sendfile_max_chunk 100k;  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。")]),t._v("\n    keepalive_timeout 65;  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#连接超时时间，默认为75s，可以在http，server，location块。")]),t._v("\n\n    upstream mysvr "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   \n      server 127.0.0.1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("7878;\n      server 192.168.10.121"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("3333 backup;  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#热备")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    error_page 404 https"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//www.baidu.com; "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#错误页")]),t._v("\n    server "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        keepalive_requests 120; "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#单连接请求上限次数。")]),t._v("\n        listen       4545;   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#监听端口")]),t._v("\n        server_name  127.0.0.1;   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#监听地址       ")]),t._v("\n        location  ~"),s("span",{pre:!0,attrs:{class:"token important"}},[t._v("*^.+$")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("       "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#root path;  #根目录")]),t._v("\n           "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#index vv.txt;  #设置默认页")]),t._v("\n           proxy_pass  http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//mysvr;  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#请求转向mysvr 定义的服务器列表")]),t._v("\n           deny 127.0.0.1;  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#拒绝的ip")]),t._v("\n           allow 172.18.5.54; "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#允许的ip           ")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" \n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("1、"),s("strong",[t._v("全局块")]),t._v("：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。")]),t._v(" "),s("li",[t._v("2、"),s("strong",[t._v("events块")]),t._v("：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。")]),t._v(" "),s("li",[t._v("3、"),s("strong",[t._v("http块")]),t._v("：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。")]),t._v(" "),s("li",[t._v("4、"),s("strong",[t._v("server块")]),t._v("：配置虚拟主机的相关参数，一个http中可以有多个server。")]),t._v(" "),s("li",[t._v("5、"),s("strong",[t._v("location块")]),t._v("：配置请求的路由，以及各种页面的处理情况。")])]),t._v(" "),s("p",[s("strong",[t._v("需要注意以下几点：")])]),t._v(" "),s("p",[t._v("1、几个常见配置项：")]),t._v(" "),s("ul",[s("li",[t._v("1."),s("code",[t._v("$remote_addr")]),t._v(" 与 ​"),s("code",[t._v("$http_x_forwarded_for")]),t._v(" 用以记录客户端的ip地址；")]),t._v(" "),s("li",[t._v("2.$remote_user ：用来记录客户端用户名称；")]),t._v(" "),s("li",[t._v("3.$time_local ： 用来记录访问时间与时区；")]),t._v(" "),s("li",[t._v("4.$request ： 用来记录请求的url与http协议；")]),t._v(" "),s("li",[t._v("5.$status ： 用来记录请求状态；成功是200；")]),t._v(" "),s("li",[t._v("6.$body_bytes_s ent ：记录发送给客户端文件主体内容大小；")]),t._v(" "),s("li",[t._v("7.$http_referer ：用来记录从那个页面链接访问过来的；")]),t._v(" "),s("li",[t._v("8.$http_user_agent ：记录客户端浏览器的相关信息；")])]),t._v(" "),s("p",[t._v("2、惊群现象：一个网路连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得链接，这样会影响系统性能。")]),t._v(" "),s("p",[t._v("3、每个指令必须有分号结束。")]),t._v(" "),s("h4",{attrs:{id:"nginx载均衡机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nginx载均衡机制"}},[t._v("#")]),t._v(" Nginx载均衡机制")]),t._v(" "),s("p",[t._v("主要的算法有：")]),t._v(" "),s("ol",[s("li",[s("code",[t._v("weight轮训(默认)")]),t._v("：接收到的请求按照顺序逐一分配到不同的后端服务器，如果某个服务器拓机的情况下，nginx会将其剔除队列，请求受理情况不会受到影响，可以给不同的后端服务配置权重值，用于调整不同的服务器上请求的分配率，权重越大被分配到的请求的几率越大")]),t._v(" "),s("li",[s("code",[t._v("ip_hash")]),t._v(":每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题")]),t._v(" "),s("li",[s("code",[t._v("fair")]),t._v("：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块")]),t._v(" "),s("li",[s("code",[t._v("url_hash")]),t._v("：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在nginx作为静态服务器的情况下提高缓存效率。同样要注意nginx默认不支持这种调度算法，要使用的话需要安装nginx的hash软件包\n"),s("img",{staticClass:"lazy",attrs:{alt:"img","data-src":"https://www.runoob.com/wp-content/uploads/2018/08/1535725078-1224-20160201162405944-676557632.jpg",loading:"lazy"}})])])])}),[],!1,null,null,null);n.default=e.exports}}]);