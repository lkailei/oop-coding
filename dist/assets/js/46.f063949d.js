(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{438:function(n,t,e){"use strict";e.r(t);var r=e(31),s=Object(r.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h2",{attrs:{id:"vue和angular项目"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue和angular项目"}},[n._v("#")]),n._v(" Vue和angular项目：")]),n._v(" "),e("h3",{attrs:{id:"vue项目2-x创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue项目2-x创建"}},[n._v("#")]),n._v(" Vue项目2.x创建")]),n._v(" "),e("ul",[e("li",[n._v("安装nodejs")]),n._v(" "),e("li",[n._v("使用cnpm :npm install -g cnpm --registry=https://registry.npm.taobao.org")]),n._v(" "),e("li",[n._v("搭建vue环境： npm install --global vue-cli  /   cnpm install --global vue-cli")]),n._v(" "),e("li",[n._v("创建项目：vue init webpack 项目名称  ...一系列的操作")]),n._v(" "),e("li",[n._v("运行： npm run dev")])]),n._v(" "),e("h3",{attrs:{id:"vue3-x创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue3-x创建"}},[n._v("#")]),n._v(" vue3.x创建")]),n._v(" "),e("ol",[e("li",[n._v("npm uninstall -g vue-cli")]),n._v(" "),e("li",[n._v("npm install -g @vue/cli")]),n._v(" "),e("li",[n._v("vue create 项目名称")])]),n._v(" "),e("p",[n._v("https://blog.csdn.net/qq_43459332/article/details/102487268")]),n._v(" "),e("h4",{attrs:{id:"vue项目目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#vue项目目录"}},[n._v("#")]),n._v(" Vue项目目录：")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("build 文件夹，用来存放项目构建脚本")])]),n._v(" "),e("li",[e("p",[n._v("config 中存放项目的一些基本配置信息，最常用的就是端口转发")])]),n._v(" "),e("li",[e("p",[n._v("node_modules 这个目录存放的是项目的所有依赖，即 npm install 命令下载下来的文件")])]),n._v(" "),e("li",[e("p",[n._v("src 这个目录下存放项目的源码，即开发者写的代码放在这里")])]),n._v(" "),e("li",[e("p",[n._v("static 用来存放静态资源")])]),n._v(" "),e("li",[e("p",[n._v("index.html 则是项目的首页，入口页，也是整个项目唯一的HTML页面")])]),n._v(" "),e("li",[e("p",[n._v("package.json 中定义了项目的所有依赖，包括开发时依赖和发布时依赖")]),n._v(" "),e("h5",{attrs:{id:"src-目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#src-目录"}},[n._v("#")]),n._v(" src 目录：")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("assets 目录用来存放资产文件")])]),n._v(" "),e("li",[e("p",[n._v("components 目录用来存放组件（一些可复用，非独立的页面），当然开发者也可以在 components 中直接创建完整页面。")])]),n._v(" "),e("li",[e("p",[n._v("推荐在 components 中存放组件，另外单独新建一个 page 文件夹，专门用来放完整页面。")])]),n._v(" "),e("li",[e("p",[n._v("router 目录中，存放了路由的js文件")])]),n._v(" "),e("li",[e("p",[n._v("App.vue 是一个Vue组件，也是项目的第一个Vue组件")])]),n._v(" "),e("li",[e("p",[n._v("main.js相当于Java中的main方法，是整个项目的入口js")]),n._v(" "),e("h6",{attrs:{id:"main-js"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#main-js"}},[n._v("#")]),n._v(" # main.js")]),n._v(" "),e("ol",[e("li",[n._v("在main.js 中，首先导入 Vue 对象")]),n._v(" "),e("li",[n._v("导入 App.vue ，并且命名为 App")]),n._v(" "),e("li",[n._v("导入router，注意，由于router目录下路由默认文件名为 index.js ，因此可以省略")]),n._v(" "),e("li",[n._v("所有东西都导入成功后，创建一个Vue对象，设置要被Vue处理的节点是 '#app'，'#app' 指提前在index.html 文件中定义的一个div")]),n._v(" "),e("li",[n._v("将 router 设置到 vue 对象中，这里是一个简化的写法，完整的写法是 router:router，如果 key/value 一模一样，则可以简写。")]),n._v(" "),e("li",[n._v("声明一个组件 App，App 这个组件在一开始已经导入到项目中了，但是直接导入的组件无法直接使用，必须要声明。")]),n._v(" "),e("li",[n._v("template 中定义了页面模板，即将 App 组件中的内容渲染到 '#app' 这个div 中。")])])])])])]),n._v(" "),e("h4",{attrs:{id:"使用安装vue-router"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用安装vue-router"}},[n._v("#")]),n._v(" 使用安装vue -router")]),n._v(" "),e("p",[n._v("1.安装 vue-router ： npm install vue-router --save /cnpm install vue -router --save")]),n._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[e("p",[n._v("main.js中引入  ： import VueRouter from 'vue-router'  Vue.use(VueRouter)")])]),n._v(" "),e("li",[e("p",[n._v("配置路由")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("1、创建组件 引入组件\n2、定义路由  （建议复制s）\n \tconst routes = [\n \t  { path: '/foo', component: Foo },\n \t  { path: '/bar', component: Bar },\n \t  { path: '*', redirect: '/home' }   /*默认跳转路由*/\n \t]\n 3、实例化VueRouter\n \tconst router = new VueRouter({\n \t  routes // （缩写）相当于 routes: routes\n \t})\n\n 4、挂载\n new Vue({\n   el: '#app',\n   router，\n   render: h => h(App)\n })\n 5 、根组件的模板里面放上这句话   <router-view></router-view>    \n 6、路由跳转\n <router-link to=\"/foo\">Go to Foo</router-link>\n  <router-link to=\"/bar\">Go to Bar</router-link>\n")])])]),e("p",[n._v("实例"),e("br"),n._v("\nimport Vue from 'vue'\nimport Router from 'vue-router'\nimport HelloWorld from '@/components/HelloWorld'\nimport BrotherQ from'@/components/brothe/BrotherQ'\nimport Content from '@/components/router-get/content'\nimport Content2 from '@/components/router-get/Content2'")]),n._v(" "),e("p",[n._v("import List from '@/components/router-get/list'\nimport ResourceList from '@/components/vue-resources/list'\nimport detail from '@/components/vue-resources/detail'")]),n._v(" "),e("p",[n._v("import pushList from '@/components/router-push/List'\nimport pushdetail from '@/components/router-push/Detail'\nimport User from '@/components/router-child/User'\nimport AddUser from '@/components/router-child/AddUser'\nimport ListUser from '@/components/router-child/UserList'")]),n._v(" "),e("p",[n._v("import minitUI from '@/components/mintUI/index'\nimport ElementUIindex from '@/components/elementui/Elementuiindex'")]),n._v(" "),e("p",[n._v("import ScollPage from '@/components/mintUI/ScollPage'")]),n._v(" "),e("p",[n._v("import vuexindex from '@/components/vuex-vue/index'")]),n._v(" "),e("p",[n._v("Vue.use(Router)\n// 先引入--\x3euse()--\x3e实例化new Router({}) 并且暴露出去\n// 路由就是动态的将页面挂载到app.vue下 在main.js中引入并且挂载到vue中")]),n._v(" "),e("p",[n._v("export default new Router({\nroutes: [\n{\npath: '/',\nname: 'HelloWorld',\ncomponent: HelloWorld\n},\n{\npath: '/brother',\nname: 'BrotherQ',\ncomponent: BrotherQ\n},{\npath: '/list',\nname: 'List',\ncomponent: List\n},{\npath:'/content/:aid', // 动态路由\nname:'content',\ncomponent:Content\n},\n{\npath:'/content2', // 动态路由\nname:'content2',\ncomponent:Content2\n},\n{\npath:'/resourelist',\nname:'ResourceList',\ncomponent:ResourceList\n},{\npath:'/detail/:aid',\nname:'detail',\ncomponent:detail\n},\n{\npath:'/pushList',\nname:'pushList',\ncomponent:pushList\n},{\npath:'/pushdetail/:aid',\nname:'pushdetail',\ncomponent:pushdetail\n},{\npath:'/user',\nname:'user',\ncomponent:User,\nchildren:[{\npath:'adduser',component:AddUser\n},{\npath:'userlist',component:ListUser\n}\n]\n},{\npath:'/index',\nname:'minitUI',\ncomponent:minitUI\n},{\npath:\"/ScollPage\",\nname:'ScollPage',\ncomponent:ScollPage\n},{\npath:'/eleindex',\nname:'ElementUIindex',\ncomponent:ElementUIindex\n},{\npath:\"/vuexindex\",\nname:'vuexindex',\ncomponent:vuexindex\n}\n]\n})")])])]),n._v(" "),e("h4",{attrs:{id:"使用elementui和mintui"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#使用elementui和mintui"}},[n._v("#")]),n._v(" 使用elementUI和mintUI")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("\t1.安装   npm install mint-ui -S         -S表示  --save\n\n    3.引入mint Ui的css 和 插件\n    \n    \timport Mint from 'mint-ui';\n    \n    \tVue.use(Mint);\n\t   import 'mint-ui/lib/style.css'\n\t4.看文档直接使用。   \n\t\n\t// elementUI\n\t1.找官网  http://element.eleme.io/#/zh-CN/component/quickstart\n\n\t2.安装  cnpm i element-ui -S         -S表示  --save\n\n\t3.引入element UI的css 和 插件\n\n\t\timport ElementUI from 'element-ui';\n\t\timport 'element-ui/lib/theme-chalk/index.css';\n\t\tVue.use(ElementUI);\n\t4、*webpack.config.js  配置file_loader      http://element.eleme.io/1.4/#/zh-CN/component/quickstart\n\t\t\t  {\n\t\t\t\ttest: /\\.(eot|svg|ttf|woff|woff2)(\\?\\S*)?$/,\n\t\t\t\tloader: 'file-loader'\n\t\t          }\n\t\t5.看文档直接使用。\t\n")])])]),e("h2",{attrs:{id:"elementui单独使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#elementui单独使用"}},[n._v("#")]),n._v(" elementUI单独使用：")]),n._v(" "),e("p",[n._v("​")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("\t\t  ​\timport { Button, Select } from 'element-ui';\n​\t\n​\t\tVue.use(Button)\n​\t\tVue.use(Select)\n")])])]),e("p",[n._v("​")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",[e("code",[n._v("​\t\t引入对应的css\n​\t\n​\t\t\timport 'element-ui/lib/theme-chalk/index.css';\n​\t\n​\t\t如果报错： webpack.config.js  配置file_loader\n​\t\n\t\t  {\n\t\t\ttest: /\\.(eot|svg|ttf|woff|woff2)(\\?\\S*)?$/,\n\t\t\tloader: 'file-loader'\n\t       }\n")])])]),e("h4",{attrs:{id:"父子组件传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#父子组件传值"}},[n._v("#")]),n._v(" 父子组件传值")]),n._v(" "),e("p",[n._v("父组件给子组件传值只需要在父组件中绑定一个值然后在子组件接收一些这个值 通过props:['title']")]),n._v(" "),e("p",[n._v("​    1.父组件传值给子组件，在父组件调用子组件时绑定动态属性")]),n._v(" "),e("p",[n._v("​    2.子组件通过props:['属性'] 这样就可以接收到了。")]),n._v(" "),e("p",[n._v("​    3.同时可以在子组件中定义要传入的值")]),n._v(" "),e("p",[n._v("​    4.可以直接传入父组件的方法，通过直接传入run方法")]),n._v(" "),e("p",[n._v("​    5.可以直接传入home组件的对象本身")]),n._v(" "),e("p",[n._v("父组件主动获取子组件的数据和方法")]),n._v(" "),e("p",[n._v("​    1.调用子组件的时候定义一个ref")]),n._v(" "),e("p",[n._v("​    2.在父组件中通过以下放式直接调用")]),n._v(" "),e("p",[n._v("​      this.$refs.子组件名称.属性")]),n._v(" "),e("p",[n._v("​      this.$refs.子组件.方法")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<template>\n  <div class=\"hello\">\n    首页组件---我是父组件\n    父组件给子组件传值只需要在父组件中绑定一个值然后在子组件接收一些这个值 通过props:['title']\n    1.父组件传值给子组件，在父组件调用子组件时绑定动态属性\n    2.子组件通过props:['属性'] 这样就可以接收到了。\n    3.同时可以在子组件中定义要传入的值\n    4.可以直接传入父组件的方法，通过直接传入run方法\n    5.可以直接传入home组件的对象本身\n    <v-header :title=\"title\" :name=\"name\" :run=\"run\" :home=\"this\" ref=\"header\"></v-header>\n    父组件主动获取子组件的数据和方法\n    1.调用子组件的时候定义一个ref\n    2.在父组件中通过以下放式直接调用\n      this.$refs.子组件名称.属性\n      this.$refs.子组件.方法\n    <button @click=\"getChildData\">获取子组件的数据和方法</button>\n  </div>\n</template>\n\n<script>\nimport Header from './header.vue'\nexport default {\n  name: 'HelloWorld',\n  data () {\n    return {\n      msg: 'Welcome to Your Vue.js App',\n      title:'23333我是传入的值',\n      name:'张飞 飞大灰机',\n    }\n  },\n  components:{\n    'v-header':Header\n  },\n  methods:{\n     run(){\n            alert('我是Home组件')\n        },\n     run_away(){\n       alert('我是父组件中的定义的方法')\n     },\n     getChildData(){\n       alert(this.$refs.header.msg)\n       this.$refs.header.child() // 获取子组件的方法\n     }\n  }\n}\n<\/script>\n\n\x3c!-- Add \"scoped\" attribute to limit CSS to this component only --\x3e\n<style scoped>\nh1, h2 {\n  font-weight: normal;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n")])])]),e("p",[n._v("子组件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<template>\n    <div> 我是子组件 父组件传入的值为:::{{title}}\n        <div>父组件绑定的值{{name}}</div>\n        \x3c!-- 父传子，子传孙，使用 v-bind=\"$attrs\"--\x3e\n        <header-er :name=\"name\" v-bind=\"$attrs\"></header-er>\n        <button @click=\"run('我是这个方法')\">子组件调用父组件的方法</button>\n        <button @click=\"getRun()\">子组件调用父组件数据和方法</button>\n\n    </div>\n    \n</template>\n<script>\nimport header_er from './header_er.vue'\nexport default {\n    props:['title','name','run','home'],\n    data() {\n        return {\n            msg:'我是子组件data'\n        }\n    },\n    methods:{\n        getRun(){\n            console.log(this.home)\n\n            // 执行父组件的方法\n            this.home.run()\n            // 执行父组件的方法\n            this.home.run_away()\n            // 调用父组件的方法的形式\n            this.$parent.run_away()\n        },\n        child(){\n            alert('你廖勇了我的方法')\n            console.log('我是开林俊杰')\n        }\n       \n    },\n    components:{\n        'header-er':header_er\n    }\n}\n<\/script>\n<style scoped>\n\n</style>\n\n\x3c!---孙子组件----\x3e\n<template>\n    <div>\n        <div>我是孙子组件 {{name}}</div>\n    </div>\n\n</template>\n<script>\nexport default {\n    name:'header-er',\n    data(){\n        return{\n\n        }\n    },\n    props:{\n       name :{\n           type:String\n       }\n    }\n}\n<\/script>\n<style scoped>\n\n</style>\n")])])]),e("h4",{attrs:{id:"兄弟组件传值"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#兄弟组件传值"}},[n._v("#")]),n._v(" 兄弟组件传值")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<template>\n    <div>\n        非父子组件传值：\n        1.新建一个js文件，引入vue并实例化，暴露实例 export default Bus\n        2.在要广播的地方引入刚才定义的实例\n        3.通过 bus.$emit('name','data')\n        4.在接受数据的地方通过$on进行监听并接受\n            先引入bus.js\n            bus.$on('name',function(){})\n        <div>我是兄弟Q组件 </div>\n        <button @click=\"sendMessage\">给兄弟M发送消息</button>\n    </div>\n\n</template>\n<script>\nimport bus from './Bus.js'\nexport default {\n  \n    data(){\n        return{\n\n        }\n    },\n    props:{\n       \n    },\n    methods:{\n        sendMessage(){\n            bus.$emit('toBrothM','消息来一条')\n        }\n    }\n}\n<\/script>\n<style scoped>\n\n</style>\n\x3c!--- 中间的js暴露出实例Vue---\x3e\nimport Vue from 'vue'\n\nvar bus=new Vue()\n\n// 暴露出去这个vue\nexport default bus\n\n\x3c!-----\x3e\n<template>\n    <div>\n        <div>我是兄弟M组件 </div>\n    </div>\n\n</template>\n<script>\nimport bus from './Bus.js'\n\nexport default {\n    data(){\n        return{\n\n        }\n    },\n    props:{\n       \n    },\n    mounted(){\n        bus.$on('toBrothM',function(data){\n            console.log(data)\n        })\n    }\n}\n<\/script>\n<style scoped>\n\n</style>\n")])])]),e("h4",{attrs:{id:"编程式导航"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编程式导航"}},[n._v("#")]),n._v(" 编程式导航")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<template>\n    <div>\n        编程式导航\n        使用 'router-link'创建的a标签来定义链接，我们还可以借助于router的实例方法\n        注意：在 Vue 实例内部，你可以通过 $router 访问路由实例。因此你可以调用 this.$router.push。\n        想要导航到不同的 URL，则使用 router.push 方法。这个方法会向 history 栈添加一个新的记录，所以，当用户点击浏览器后退按钮时，则回到之前的 URL。\n        当你点击 router-link 时，这个方法会在内部调用，所以说，点击  router-link :to=\"...\" 等同于调用 router.push(...)。\n        可以使用以下方式：\n            router.push('home')\n            router.push({path:'home'})\n            router.push({name:'user',params:{userId:'123'}}) 命名的路由\n            router.push({path:'register',query:{plan:'private'}}) 带参数查询的\n                const userId = '123'\n                router.push({ name: 'user', params: { userId }}) // -> /user/123\n                router.push({ path: `/user/${userId}` }) // -> /user/123\n                // 这里的 params 不生效\n                router.push({ path: '/user', params: { userId }}) // -> /user\n        《<button @click=\"godetail()\">通过js跳转到新闻页面</button>\n        《<button @click=\"godetail2()\">通过name定义js跳转到新闻页面2</button>\n\n\n    </div>\n</template>\n<script>\nexport default {\n    data() {\n        return {\n            \n        }\n    },\n    methods: {\n        // 两种跳转模式\n        godetail(){\n            this.$router.push({path:'pushdetail/44'}) \n        },\n         godetail2(){\n            const id='44'\n            this.$router.push({name:'pushdetail',params:{aid:id}}) \n        }\n    },\n    mounted() {\n        \n    },\n    components:{\n\n    }\n}\n<\/script>\n<style scoped>\n\n</style>\n")])])]),e("h3",{attrs:{id:"angularjs项目创建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#angularjs项目创建"}},[n._v("#")]),n._v(" AngularJS项目创建")]),n._v(" "),e("ul",[e("li",[e("p",[n._v("安装nodejs")])]),n._v(" "),e("li",[e("p",[n._v("使用cnpm :npm install -g cnpm --registry=https://registry.npm.taobao.org")])]),n._v(" "),e("li",[e("p",[n._v("搭建vue环境： npm install --global @angular/cli  /   cnpm install --global @angular/cli")])]),n._v(" "),e("li",[e("p",[n._v("创建项目：ng new projectName  可以跳过 依赖 ng new projectName --skip-install")])]),n._v(" "),e("li",[e("p",[n._v("当 文件都出现时 使用 cnpm install 更加快捷")])]),n._v(" "),e("li",[e("p",[n._v("运行： ng  serve --open")]),n._v(" "),e("p",[n._v("/******")]),n._v(" "),e("p",[n._v("* angular6 使用socket.io 报错global is not defined 在 polyfills.ts中加入")]),n._v(" "),e("p",[n._v("*/")]),n._v(" "),e("p",[n._v("(window as any).global = window;")])])]),n._v(" "),e("h4",{attrs:{id:"angular-目录结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#angular-目录结构"}},[n._v("#")]),n._v(" angular 目录结构")]),n._v(" "),e("p",[n._v("e2e： 端到端测试")]),n._v(" "),e("p",[n._v("node_models 安装的第三方模块")]),n._v(" "),e("p",[n._v("src ：项目源码，开发所放置的代码")]),n._v(" "),e("p",[n._v(".angular-cli.json: Angular CLI的配置文件")]),n._v(" "),e("p",[n._v("package.json: npm配置的文件")]),n._v(" "),e("p",[n._v("browerslist:")]),n._v(" "),e("p",[n._v("angular.json:")]),n._v(" "),e("p",[n._v("tslint.json：是tslint的配置文件，用来定义TypeScript代码质量检查的规则，不用管它")]),n._v(" "),e("h5",{attrs:{id:"src目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#src目录"}},[n._v("#")]),n._v(" src目录")]),n._v(" "),e("p",[e("strong",[n._v("app目录")]),n._v("             包含应用的组件和模块，我们要写的代码都在这个目录")]),n._v(" "),e("p",[e("strong",[n._v("assets目录")]),n._v("            资源目录，存储静态资源的  比如图片")]),n._v(" "),e("p",[e("strong",[n._v("environments目录")]),n._v("      环境配置。Angular是支持多环境开发的，我们可以在不同的环境下（开发环境，测试环境，生产环境）共用一套代码，主要用来配置环境的")]),n._v(" "),e("p",[e("strong",[n._v("index.html")]),n._v("          整个应用的根html，程序启动就是访问这个页面")]),n._v(" "),e("p",[e("strong",[n._v("main.ts")]),n._v("             整个项目的入口点，Angular通过这个文件来启动项目")]),n._v(" "),e("p",[e("strong",[n._v("polyfills.ts")]),n._v("        主要是用来导入一些必要库，为了让Angular能正常运行在老版本下")]),n._v(" "),e("p",[e("strong",[n._v("styles.css")]),n._v("          主要是放一些全局的样式")]),n._v(" "),e("p",[e("strong",[n._v("tsconfig.app.json")]),n._v("   TypeScript编译器的配置,添加第三方依赖的时候会修改这个文件")]),n._v(" "),e("p",[e("strong",[n._v("tsconfig.spec.json")]),n._v("  不用管")]),n._v(" "),e("p",[e("strong",[n._v("test.ts")]),n._v("             也是自动化测试用的")]),n._v(" "),e("p",[e("strong",[n._v("typings.d.ts")]),n._v("        不用管")]),n._v(" "),e("h5",{attrs:{id:"app目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#app目录"}},[n._v("#")]),n._v(" app目录")]),n._v(" "),e("p",[n._v("app目录是我们要编写的代码目录。我们写的代码都是放在这个目录。\n一个Angular程序至少需要一个模块和一个组件。在我们新建项目的时候命令行已经默认生成出来了。")]),n._v(" "),e("p",[e("strong",[n._v("app.component.ts")]),n._v("：这个文件表示组件，组件是Angular应用的基本构建模块，可以理解为一段带有业务逻辑和数据的Html我们来看看app.component.ts中的代码，并解释下代码的意义"),e("strong",[n._v("selecto")]),n._v("r就是css选择器，表示这个组件可以通过app-root的HTML页面标签来来调用，index.html中有个"),e("app-root",[n._v("Loading...")]),n._v("标签，这个标签用来展示该组件的内容")],1),n._v(" "),e("p",[e("strong",[n._v("app.module.ts")]),n._v(" :这个文件是angular根模块，告诉angular如何组装应用，根模块不需导出任何东西，因为其他组件不需要导入 根模块")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * 这个文件是angular根模块，告诉angular如何组装应用，\n * 根模块不需导出任何东西，因为其他组件不需要导入 根模块\n */\n// BrowserModel 浏览器解析的模块\nimport { BrowserModule } from '@angular/platform-browser';\n// Angular核心模块\nimport { NgModule } from '@angular/core';\n// 路由\nimport { AppRoutingModule } from './app-routing.module';\n// 根组件\nimport { AppComponent } from './app.component';\n\n/**\n * NgModule装饰器，接受一个元数据对象，告诉Angular如何编译和启动应用\n */\n@NgModule({\n  // 配置当前运行的组件\n  declarations: [\n    AppComponent\n  ],\n  // imports配置当前模块运行依赖的其他模块\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  // 配置项目所需的服务\n  providers: [],\n  // 指定应用的主视图，通过引导根AppModule来启动应用这一般是写的是根组件\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n")])])]),e("h4",{attrs:{id:"创建组件并使用"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建组件并使用"}},[n._v("#")]),n._v(" 创建组件并使用")]),n._v(" "),e("p",[n._v("指定在哪个地方创建组件，同时指定创建的目录ng g component  components/home")]),n._v(" "),e("p",[n._v("使用命令创建组件会同时创建出四个文件：")]),n._v(" "),e("ul",[e("li",[e("p",[n._v(".html :书写 html代码文件")])]),n._v(" "),e("li",[e("p",[n._v(".scss ： 书写css文件代码")])]),n._v(" "),e("li",[e("p",[n._v(".spec.ts ：测试文件")])]),n._v(" "),e("li",[e("p",[n._v(".ts ：相当于一个js文件，会自定义自身为一个组件，并且暴露出去，同时制定了组件的名称。和模板以及样式的路径。")])])]),n._v(" "),e("p",[n._v("创建组件的同时需要在app.module.ts进行挂载，挂载到根组件，")]),n._v(" "),e("p",[n._v("1.先是导入这个组件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("// 引入了home组件\nimport { HomeComponent } from './components/home/home.component';\n")])])]),e("p",[n._v("2.在装饰器中引入组件")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("/**\n * NgModule装饰器，接受一个元数据对象，告诉Angular如何编译和启动应用\n */\n@NgModule({\n  // 配置当前运行的组件\n  // 引入组件\n  declarations: [\n    AppComponent,\n    NewsComponent,\n    HomeComponent\n  ],\n  // imports配置当前模块运行依赖的其他模块\n  imports: [\n    BrowserModule,\n    AppRoutingModule\n  ],\n  // 配置项目所需的服务\n  providers: [],\n  // 指定应用的主视图，通过引导根AppModule来启动应用这一般是写的是根组件\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);